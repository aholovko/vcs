// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZZVDbzOfQ+3J05xApiTAPgXUX+E0TnTXPAufWySjKv3qoxDoo5GpsygniOUGpMAlrjWUIStv8MJOrSOI",
	"4/UgK6AQvFK+pmSju8V07LVlW2rH7kAo3zwLajdDkICO8ojVoo+cWLTGhfxerrB/GikdvAOs/H9OxMr8",
	"bK8IXfCo6hrrnfHvZ1dYGE9XOWNwtSVyGHKRJw3MHeYQkOX9qckWl9femo3ttVlx9wxXqp7CtBBXjTeB",
	"im/yJFF6xzJK0CPt42IAseu3bXcad+7AukP+Ot9mki05zla2Ny5OY7YutUr1fD6rukmzd1Fuo++Z9Z2z",
	"LRA7e/sf9b7RDd5Ir0ZcJbawb4CK6zP9dn+yxnLvSi/ULmzNERd3BEdMD1nKLYyhJZEOOUT6orBz7vLj",
	"YJLoofV7oStmzyo+Wyx6MWzFRvb44X3/A/ueAsVKoYGC6ipFcBHqCog0jlER8K4p/BLAaLvWb719sq2s",
	"HyuAaqetJowodf7GqQduaZS+U+9vji8bVW3IvtED6Hj+nm5Ngm2WW25Rnu935J5e4LN9zqLzAqdD8uwn",
	"DSO47QtLoD08y8V3VZSXohFI2E+EdhyPXuKjl9jlJV5vCyfQrwssVy/qCFgpgQhO5LDb6DVraeboT/Ij",
	"QGUmmK49Z7LMxhZ9cea9CWhqe8CvgJn4+BU+2GNu0XV3gBXtIvOSSIOlXLg5JgBvHPBa19dQV5z2w/gE",
	"ot8FmlP4XFR7MjyTwG3wcBwK3e2p25Y4scF7R0UfLmRvRsWbymjo9gHMijreRLXn3L4AJ4I9EvcN09PU",
	"T68XOk+1w2IPLbT/0ve/L7O6omoaR57OfojC8TfnD8GtlSEHMeuDn7f9ON0f5R4U8p/C4n+GOvaNub3q",
	"41oLxgfRyMEWfQN0clYmT4hX1Wvg72oOKyD3Dw8OEhbhZMWEPPzns++fjdSGmE9UeUIH8Cc6ShijNYtJ",
	"UrlIrdYQjeqcZefV8ztuGYFAv767XxGcyBWyHU/Ne/qv+o+f33/+/wEAAP///kY+SnwfAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
