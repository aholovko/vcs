// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+if5vycQcBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
