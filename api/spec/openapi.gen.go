// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
