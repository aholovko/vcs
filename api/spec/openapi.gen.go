// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
