// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963Ibt9Lgq6C4WxW7lqTsXE5OtH9WkeSEiR3pk2S7TsUuFjQDkrCGgwmAEc3j8ta+",
	"xr7ePskWGpfBzGBulKg4J/qVWBzcGt2NvvenUcTWGUtJKsXo8NNIRCuyxvC/R1FEhLhiNyS9ICJjqSDq",
	"zzEREaeZpCwdHY5esZgkaME40p8j+B7ZAdPReJRxlhEuKYFZMXw2l+qz+nRXK4L0Fwi+QFSInMToeouk",
	"+imXK8bpv7H6HAnCbwlXS8htRkaHIyE5TZejz+NR6cN5TCSmiagvd3H6X69nF6cnaLMiKQoOQhnmeE0k",
	"4YgKlAsSI8kQJ3/kREjYHk4jgtgCYRQRLjFN0TEnMUklxQlSO0NYoJgsaEpiRFN0SSLY/nfT59PnUzST",
	"6NXryyv029kVuiZ6BSZXhG+oIPAzFQinCHOOt2oddv2BRFKMG6b9Xn3z+8WL4x+++eEf7xV0qCRrOPx/",
	"52QxOhxNDyK2XrN0usXr5L8dFAhwYG7/4MiHxImB3mcHZ9iK+nc0T1kaBdDiEm4CRSxVAFH/ixF8qoBn",
	"TykZijjBkiCMMs7U0RYoY0IQIdRJ2ALdkC1aY0m4giVckoG8njJygA5igdnenHzMKCdiTgMYN0slWRKO",
	"YpIymFXhWUIXRNI1UXAVJGJpLNRu1E9mTm89qmdQC7YtdNU+r4/14ck5WXAiVm2kYz7Rs4zRZkWjFYpw",
	"6oOcXQOOpmRTWlMEISgilgWu9+z8anb229HLMaILROEKIoXsDI4Cg+xFFcQbJZSk8n8WyD1Glv6Ca8O2",
	"5vrPocMCaRno+cwiMBlA74+cchKPDn8v86DSQu/HI0llosaG2J+bWNPgaDz6OJF4KdSkjMbRtxEdvf88",
	"Hh1FN6ecM97MN4+iG8QbmSRRg+uDYE7k/a37qHqm0rFudjnOhb7NoQcpCBT+WeVEYeYTZWa1mSTrOtup",
	"nNBfonpOvef+xywtHDhq6ffapd2SNACgKw9NFYtZ0Eg/X/B9EPPhl3lpmuqsP+drnE44wTG+Tgg6ujye",
	"zZAkH6XipLc0Bv4Yx1R9jhNE0wXja1h37DgBFoIKCRvzXqyZIiKFZbckUcdTvCpPY8KFxGlsOSRsEckV",
	"lohFUc55kO7GIyBJPtc8YkFJAKvPMrtJvXLxbXBGH4ZzGocxcnbSTRrViQzcAYlK+PJ5PPoRy2hVAKmR",
	"Ggpx6Gx2coyu1TAfuIYpthHK3HzTn2Dq++pPM8VqHu00nLYvHdWGdwuPAK0f69Bq5CtNgscvl2e/IfEw",
	"0sfx3aUP2C69TxGkdLUafGVMYik5W4wOf/9U23F/LNPzVu559Pn9ILyzm2tDvIEPVTH0mKULusw5ULe4",
	"zLOMcUlC3CI1ArVmZvrHayKQyEik+IMDuy/Vq0/DfFPopYSvGgTwN8F0HVBIXjCO1oLN1zGLEE5jdBv9",
	"DxFPPmwkuo0QS5PtFJ3p7ZawO1GMnC1Qitfk4BYnOUEZplwoGZBwggiOVvBjwV2Fkp/VNhC+Zrk+jsj1",
	"3GyxIFyrFeVTTpGSvPQCRq7EKQh0SOTRyoLySaolvxhLrKgxj2TOiXg6RoyXdBlvkC+AFozXwxjQdah9",
	"DnvrMsXmT4oJyjMLulRwnONkOYeziblowRi7+QgLggRJBZX0lhiuIzRyGDAbtTVZMk7lai0KzDHokgui",
	"BHCktgB/Nwpvmbc44q0LyVWNjG8zyZYcZysaza8pvNjzNZErFt/jqVZsU8V/KtA1y9PYagHFM24J6DSN",
	"J68F4WizYpbTqtOXMWzQcWMqsgRvg2RdV5g9WmAlItKbMJOhglTtzh3cPI0T3q1C509wuszxkoQU7i68",
	"NIcInY9FYQWoxCgcazBqt70m+5ZU7BFVy8Hvs8uz6fN/Pnv+zeS798GnTAuPASgj/72tLqtHaRhS4YFu",
	"jOiUTMfow0bOb6P5B6GeW46SOJvfRlN0QjKiJU2W+hMBaY7hL9XrW+QcmBBJyFpBWR/PbkQbYdIYPWFG",
	"1ky2T1GGuaRRnmCu+aBGAu+CXx39y64Aoz0h2vBMIAPmEKc8PghJxuOQDOyoTyvKiisDt9bcSBOf4vGw",
	"x7XlyzCZ+r8tEiuWJ7Hix2Yzhd79FicJkcPoCgQiUIkrTKPQKc5LD1obpp+ryZQaVDzDCrXLSkC/N1hJ",
	"ZLC3J+Jpn1c4+KY0GDXakVkbNfTLZxamou39V+wBvvHxrB05biMZpvSAFGBIPSbq5cCyhOpgjDz2yK1M",
	"7yspM3F4cKBeZ8lxdEP4lBK5mDK+PIhZdLCS6+Qg5nghJ+rvE4ZzuZroHUxuo8mz553KleEYnmzXKZtZ",
	"oi7e+Wmr4KfVxYrcd1I8CGWJ6xpHN0uuHqh5xBJtXaldQMIinJCGn5asC9Ffqm+UiorX4UmUgt6yfM6T",
	"wN8/h2Boz9kAoEb4zIxU+jMVkvHtCZa4jnKtnyNOMk4EcNkKw3Qi70p/bp5gw5Rbld6QIu8TV9hE6E0A",
	"vKpBwXKSQFR+CMUwpgiKnHEOYBngIKfuA3SCJWk0iCgYNUxhAd4+QegJmfWynmScLWhC5reEi6BhyUxz",
	"rr9D5ruwgZbjVOCo0RBzVfzeyyBTRgd30sA1B9lKBVed9WA4E+lr3hlo2NmfAtNmXjMPhS+/a+Wvqs8q",
	"AZ6oTwvLvTaXGLM6ersiqXvSyj6xsS+nFb8qqQmnW23y9xc0X9r3vRgiSs4ww2i6aN/e9JykoP+UIdzT",
	"mnFajG2ReF94Mm2J92nQNXogjEjVta1f3l6BtNTA9Yda4nYwwvUyv+EoIpkENtbgjSoLUyVbhfbViPxa",
	"qNOkMtlWfVMl05pGiAIZtCGu9OqglEnEicx52gD8R3tht72wyzhYkaPft1CJD9XSLhcl8gnaOoYb/ANa",
	"L07rkxf6gtaIEE2jJI+JsOoUjm5StklIvAR5xefpvYTdEjDfh+l3Z4Nmk9G1TWoyglfdsH7Rw2EXmNlq",
	"28F7G4g6X+Ctdks01u8dtLRgdEIWhHMSIyfFeRNO0RVYQUC5V/+joVlYWS27RXTRoNVusEB5Cg4/yRBd",
	"r0lMsSTJVoOlxVZLRSvDtcuTCGx+3sobKlfwszub9+NpGmeMpnKIaNdOGFXs3p1OTkuiQNDY4PF737Sj",
	"nkIrSNQNaC2RTckywAnfniKcLAsT8IDp637hNAqvQNLoflb4sLnpAy6MBE2XCUFZfp3QCB4+rGTKX97+",
	"qnFr5z1UEEdtaAyg1cdvxR7vzu8DcVq8Ru0YpI2DmxUBsbfDT1TIrAFHkxKgG7k3mEdZpoZdvbwM4WNv",
	"b0bQmaT2orDr94sXx99/9/wf7/29ej6NJwrB9UpP7cf/fO8ZzY0hsutclp0oxkTSiMVVjoYYb4EGCI6/",
	"vL2yW/jh/UD1Po0eCF6KXP8j4GUONy8otgquHxlLCE7NM6T1PXgt26nDTKgtTF4ci08sPvIba2uYyaCZ",
	"vhv3FEpu/QgtK3tLATO7JXwbhKO6G3UUsmCc+JIIKC46HIf4092Qrai7VpFR7urbXeBEmP3amY/+haIV",
	"E8SBkdrAn/LOYSnGlYLk8dprfSn1uLgQx2ggjPD992TP92LqvZRY5qJVABbwSf2pFm5oA5Z/6niWzATm",
	"8+CpL0ufDD3WWSabIqW0a0GNBaW1JISXj9nvLF1HUFvpeYoTknESYUniY7bOmCBns5Pjb49nVX3FfjU6",
	"BFKsHLOYZYpeC4IO9AoHxnYpDj6Z/5udfHb//0YbKj8fKN2Wa5FbHAB2YUkm6s2fRHpTU1TYPPSfFCDN",
	"VlsB2qYdXeANUqdOiCRVNzF49xWfiHIh2doEVod8UzSeS7LOkrBx+CRgeLKfq92meZIo9cDCte5+vCWc",
	"05jMm6zIZ+YDE4zXMqljIt6sJn5kHgeVJzu1t3kbcBLTuM9SnlGsB6oFwHv6MVrhdElKAe7HLCY9TL5E",
	"j4U3P5crBA/ugrO1DVwEN1kg1IeSVM6xEOpvrCFyWzN7eDGsy1lumHqexRgJkmGOjWSA0bvR/343QtEK",
	"KzQnXOt5C8qFhOecCi/cGmEpieJWiuv+8vZKPyPaQNTy5Tk7V1+H7VSVAzWEaF9q2655w3UEShF6msuV",
	"jhqXpLSHLEtsfKyJIwnlfKAnb44vn+qDszTZerKTezXfjXKeHlIiF4dgXRaHcD+HeqWJ2/5Ebf/ww0ZO",
	"7C8FHN6NdAJGGsNOvfAds991LmT5MLlmJgrB0NfTZ+iomG3yI1bHP9ZDj4pR6mAaQG0AD7rI9FyzE8DQ",
	"N8eX2ojr8cBwFEI2V3vq8Ti4L70HopOIer4WLfM0Gaud0LW+K1k2ZgjtL1tGfjR32PEew2f94D3MwzUz",
	"r6E1TzW45O8SJPkqTyTNkppkjY0BOhAGOY+DTugLAxK45HNOJvb4ioTUHb9I2GZa4Pwl4bc0IghHUiAs",
	"0Nk5jNxoidljLKL5ofHiDmFnxGhYIcLDdI3s7/b0RocA7NPBZt5bpy1/EBK5wsK4FgpfG15IHUUZESEW",
	"eZJsEY4UCACzq5k6nS+9kXW6HE49ntFqFGZLVoJ36f4P7d476+8IORJOFEutOHyEF+wUsVTQmHB14Xoe",
	"pZlYt8QoVqKfpGvSsQUbsNF4GvigIwDByGFhV7j5MSS/eT5WtFnRhJSRIGJg0NZWNCpKvN0lUI2t0dhI",
	"w8bADDStX9xcMU1LnAHxUYRtcZYH9WQdd1Dseq5wXOD1A/Govcv8XxYtFCpCAI/tj87eoiQPShJwYhST",
	"XGqxfoourZXToBlNl/24V2g/96myhBZ4QO3l4cjJ8nNNNj3UHDvQhAPocSFScQar/rJVhb8awiACbRTJ",
	"3tA0hthF/dg5pxdEmjG0pLfg93pzfNkqJpv9z12klQmrKy/++uKl74aGA5mhkJznvezYhtCiK3xDBFIv",
	"poJGRJDCHaMLzDckSW5StnFe/yKqBWx610xJpy2b1NyiOhnmkDdozXtga0w9Z6G9LncKdbINTRKnSGoG",
	"1PAlTZ1TPiMpjSfOZGI/Ozw4aIO322mfLHAtjR2sWAKMytP2ANuMVlUcPipRw+uLl+GdtLwJ1SyAO78O",
	"vYL7Bz5mAWVhyXEqG1RrQxkRTp152dwxjNKxjUiuOMuXq0rElnFDFx96wiho51oE8bWqtFySAfIeSko5",
	"qFyQAwEirCQZSBMkzddgVi6xA/XxaNygnMO2tEaecTLBTuTXw9536LJB9DPZShC7E/KtGGgq4mMZ/iMn",
	"1vJgjO02OM7aLq6pNvgr9j8xLnXfBqAgYjmAc5/X15MMYSAN8lEiQSTKMxTnsOOMk1vKcmFAaR0ChjoU",
	"96G3EMKnj+ZHmutLHiNq3A8mGkL923gcijiAqgnC8HN7/ACItC3HQtwL9IONTOuFLGiKSlqr1twWCdto",
	"SSZwyQrUbXF/LtgvTBsuSMVxSEByc4lwDPIxA06gVEcjGWukzwhXvNBagytYbgNH0AlZ4DzRj1K1XkNn",
	"6QS3P/hd9NuYH0ZWpzywYzvlsrw/zdSHOfZyQfg8o21uvZ7KeS/vX+Xw5u6x9YhjBQeOzme/IZwwNdbS",
	"lC01Y0qxpBCY5+OTAY/ayigkBOrXyD3GsXuNm/2YiwQvhWcQtAdRwknqh/sgUNXMxIrrFGk4PeTCsNS2",
	"m+g3XOb7K8h6ZcNRX4fSITiUmqRtmgpJcDxFX57t6Z4P+Gebrx6F90fhva7qR51W6C9amg/nYzdbTu+b",
	"pu/D+HrPe9rBZjW9mwF3f0DdxQZ8z7v5a5qRH5XZR2X2UZl9VGYfldm/tTJ7Vy22O4GxjxrblL0BJY/m",
	"3lseVDxskGBYHPceHsOZC/aYYaHIOCG36q3yswUqDJoFJodbL5xpoIz8fHV1jn46vQJeD/+4IDHl4HbT",
	"ywq0hmo2Om3yvy40BnkCvWXsoNQpACrk1OWI1HMMeqBcEcrRml0r0n3rFNpw+tTHsPO7BBbLfj2l2ERi",
	"ck4SI/AsUEpI3JDMaUm6vtJ5mWI02H4iKdHRc2dX5yjTOpODbXcKShAzxvUwnSaE3QXf35zbygxlLPX5",
	"SZEN/oImkvAedVjaBkOKcuiDWRxktFnOrdMl/FwErEAvTaaEEfD8V0PXJxF+sL+pylPYGAAhf9bqp2To",
	"DeGu0EHfB6GJPRmAt93VrVkudFs+d2qxj3mmuADxzE66g8OC05nB7xvP1oiL6iQKBb0aA8FgrILHmgeu",
	"NUq6objdpVP7jJquZKqFiZgM6BLtsRKt8To0RR824okG4lPEOPogWJrET/RMT43ZROyQuLrXWKi9ById",
	"18GMoNhGQBXRBssu20gZfUyKQpnQAhjWlymGZ79zZkS0Ui9ZugwBe4UTnC5BdMdxTFxBO0j6bzJh4WCy",
	"2NWKqMfV6et6CqUCsTWViqWJrZBkjSBzH+x+5qXsMJUVuS/9ilwUmRxQVG6NQ6/nCfx9wLk1R9SP+CuI",
	"Xw6D4PXFzEKgPqTIFw1DSAe2k/jr7757/oOfcMoW6GR2gp4YgYIVRWtOZidPu6DZjJ8WyXqiqCvZUWP9",
	"0Ua2tBygC1RUWUPkjxwnAkUbOUWXdJkq1ePtlVJSXa0JqH3m6k00pO8OXvGDt+Ivw1eEmn3Z0EX1qCl6",
	"SdMbEiMoKwVA7Fi+03VSLNW8pakuTXIZKE+hl1bDp+g451wny8t6lkHxoSKXrz5s5FfdgqS3Oe+pdvjT",
	"N2X5palEVs32lXNJPsqGwmK0w6IEMpgrp4iBZLULyNNNlFLgVQxI2JIFcpZnLgyvHRxqUx4c4Fj9yplB",
	"dsW5KxnUJK6Abq2QyCuI66s/XtEhpbnlNImNJ4NxEraXoCcXL47/8f23PzzVCqdmPTDIGC+1sqdtL9YB",
	"CDp/eT6wDU6bkoVoWOQ2vwoScRK+6Jo9qdmSM0Bi9m+tvIKfnFLdn13Lu+PqxfVkseecZJh3lz4ppFQz",
	"IlRSfA8F2M1qxTI/4nBQV5OCPLBQmp5m3FXGvQFsw4AOnmLFoI8aFJmuK9CuZmDxZevp8JCC/aXmtCRE",
	"dRpp3xSpe0q10Tacd6OIxeTdqN2aek80GErS6nV994MK3Ya5HrjQWFWlhAzNCTmaFX8lKsy4zHVJc8Ga",
	"as8oXmB4G+lXOZpXYlHNp+9lLmUSMlZpadUVwYOcQe2MuLp6GS7XleViReJ5cK/DoXN+dNEOk14MC0qj",
	"GesdQXkWsXXduM/bys7UbNeLhG0GEbqWUKzZI36RsA3oma32E3fJ4yY0Gzte23Cr/SlumDWw9qRoGS8x",
	"lopdXqMe5NnjnbzXJywAvYHvVBBWcOCQcbj8GVLf6UzSEN+JKUkjfZ1htfad+ujdyLirjCczdmZz4+IM",
	"InwwxeREk5Lu2mU8+Z5ZrHBtQ539QYXady9bucLAcBrKPP4Mvxpf+iAIOKvu/G6FPC/sPF0VPRsKBBeV",
	"1yHOoBtCO77ZevlxBa8q8G2jB0DqXbnHBRF50k9c69V+Zx9FIwscreH+X6Uu5BgU9XnTCbVyWa2CG6YO",
	"yQNdLa4uXp8iuvBjMU310y2RCN9iCuYRu3Fjqz87t60ydbgMWMas17cIYpXMlBGsVne18UeVCtouJuFJ",
	"qDagesGf9qg5FPkM3wHEB6OFRhtxGPzuTx7tXrQytkOCoxgor3tbbVmrt78p0EOhqShd2ZSzJhIDohRd",
	"fjzjVc8WClUnJGOLP7NpTqDHQmG4251F9zhXCQdrN9IX/XKxCimmfZTqXKwqqpMZ3CyxfVnqdFN9kaae",
	"vT7EO+A2APwkHq7DwrDeemtbFWdTHDvN19cQNoRltamCq+Zs5BFrfnx9MfMLPEPNzYwZWjJqoi6L448o",
	"akMLZCgppiLixK86Gayzc51L/VzIbUYjnCRbHfWfYLViAn1nuERPyHQ5HaNrIjeEpOg7iEn5x7NndqNP",
	"mzraar01aJ6uHgI0TAVtHcMaKg7kQveZgOJh8NoByIQrWTrJBfTJJZyYAt+V4reloJh6mGE4jK5T3/GP",
	"WuoTXMHvJsTs6xy4IEsqJOFgl9DVgTo60RalilxIpprChB5D/9jhnWovdXlY3ZZUzwHBRxo64eK26qtd",
	"m55631l81qs652JMrvPlMrx4V8/cTqDe4XYamX77vTTbsbUNPhxIUAGgqdAOnaZYKSxX65mGJRWuYJLG",
	"E3BmmNjeEjG05ZkEKfz1xUu7BQiN3JBrlOEl8VrY1qvqdqiVIPdEsk3RsyKHY7k6t2UrtB0LxqOMsCxx",
	"NbmpgpYTNvTyY48nkjWmCcJxzKGl3bAI1SI4vm3XBTqUw+LL9cgUo0sStnHB+i5q0JZGE4eoHsI+RrtE",
	"sA875ofNjWgqYPaV0C/iW3KNfiVbdEkkilmUg7pl2r6ZZuZ+w77IDi6iAsIdv9TanThoHwXrDI6CW3vy",
	"y9tfn5Y2uMvWyn2lOrdmRATzaKnHDHyvNmiihR4yltBo228BMHkKHcu/KnOKjNNbHG2Rnq64m0r6lW0L",
	"GZMsYVv4gvElTosI7yTRrRhzQcQYcQIQG4O8oESShAkiUEa4gAhACAEP68c61FUdrI1qLDHY73Ui2szx",
	"gAoEi8RPULKBpJyyUScbjxSH0ULJgdOP6ksZAHXCj3AKIfbmrw1ujwAzGE7IDbkAl4EmKiLDEZkU5Stt",
	"pWyvmV7zUWoNVDqTSAVbyA3m4ci3I5Sn9I+81JjUYD+Ir+j169nJU2iKDsEwJoLbbKpoh844suto4hYr",
	"wl10c1l4MnAHmioptxa37ET6vY23KV6bJ4UbUaHBLOuO2tjI68j27gocuIz2xTbcl3CWdz5AG1yZcBvO",
	"X6K9I+uGUDBnqnXVPkMlMN3mtO2pDXdTlpIxKkUdzJXsX/3bNRY0mqLfWEpc7pNaxfBm/bFAT1LQahDO",
	"MjG2Ie/qH08th8cpGNtW+BZqqHIihctQOQwuGoaZuDNDloSvwVotTOq5Y8mVu61waJ2lxXEkczDh6YB7",
	"saKZ095Kgp4pbl6arfwBGAuFplbLdspPaHv0XYtMfCexurOEKIQHFWRWWMogG8Fk2FWl8I6QnWB11o6W",
	"fG4CXeEsDhZ/u1LqO5YGEX2JryDuDRZ1T47f6umLVA2KaKYg8PTPRpd3xX39HBtIUC2qFNhNlksMsxBL",
	"6dxVaz2+xivRY7XdRE+gHo1nSqag5s+Ki+ifWq/qUW16VJse1aZHtelRbXpUmx7Vpke16VFt+turTaXY",
	"iXrsfUmLaMWzsgT1vkMhG+zo6BOV1aOtXpH8+9iiMZQOHGqM2A/4Pb3ll5LxndrlCMn44F45LA6H4LfG",
	"5z9c9LAXreBK+Bigt8PpjsAe0A5lF7C3NCbpOt6wqObXWYwlqaalNiJT6+fOUS8kzyPNwHM1QJ3+zXFj",
	"77ci4CyYb3/3LFsvB6BhhXLLsu4gmWK22thx+TyB3Xs42g7+nnf4BidUTXNe4AOJe/KEWz3WlIWqFbdR",
	"r2ZG0+ljD63HHlpffA+tUEm3UM4BqmD5wJI2r5W0aIiii0uEa8wZ4u+k27vTf3cQ3a4MoGeVYZd1XhKr",
	"S4O8Om9eGTz7lriKS2BZjQgHLuLHim8zgrAw5WqgJtylMZB8N30+fQ64Xqscx+SK8A2FXrTa2lgvZTpu",
	"mPZ79c3vFy+Of/jmh3+8D9Us3U/cZrXAhs5Ma85nDNljnOWictlmwBDzSUPeUalIWdxdy6kQ4NweaqlI",
	"3Rjel1QIp4utV9VzRaKbplQM/XEwwN7ThxaYJjknKFJTIYPTofomJLoJ1TZRo+CczTF49WEQ7IbWRAi8",
	"JDtXAnnjfdPMqqsqLhzE7iy4kH9zLQDvHWpfnaSrIpJ3Y/7uhnWSepjaRT1r+lQh4Bf1acjdaLmEYYW1",
	"mtZuLflzW6WdfVf8uacSOp+bodanCk0r4Po8x47DlDJ7RBceK6rqXx2hjSjbMmcaDzQQJH4GTh8OXKrZ",
	"+Zfhwa18s0adTTC5A2i72GQJrO0INohN+XtwjKpcyzAolxeb2RvDrQvoxZZar2QXlhmCQx+m6e9qMNuE",
	"n74Avhk6/B3gN5R3DsDtnZhnE7l2s8/gqXpD5i1Jkl9TtknPMpLOTnT6XUev4O4x1WQn02iw/IUBLghY",
	"WBDjKVHaOZgvIPdpdnK+e8EQr4fI2flXwjc3lKwlp23RQtdYRis/g73XerVky69EvVKRW9emMb3UemUu",
	"tLVnJWUmEOCJVpxfHf3L2b0yxuUYZViu4Kc/csK3nuZbIJpfam/ckAkaM6KTjI2FCD5r3u+QJh+VnNGi",
	"+Ot56U77mV9LKCSKtMzP451bxYayxJtTZX3zgbk2VvJoQQiKUYlTvCYHXmWysam3RnC00nF3kLVW976b",
	"rRXmulqxAnugeNrVbnZXbH14PO3AqgI+rWnIvWq4t1wwJzLnabm6qL+2b11K66ZXZ4Sy1d4Nl/N6HeiC",
	"8FxdubaYqsXM+nVijbUTvbDYLnBS8huGW942tdK9arjurgjWO1XwaPNSVohYlxm4F34bqllwT6g83hfP",
	"bd1zuMyMyBK87dVKqcR/qmzLTISKp1ZbSOsbh4YqznKq9OrcKCy95B3PbGD23h762UbsEICoj1kKr7Ic",
	"GJ5+9+r/BEFpV9tahBWFfm5+OYT+VstSjZKdcfU3b5YvHknDm+3hQdG3ilOWbtcsF3MduNZ5wZale+wy",
	"0JDDxtvgSqMNYLc42PVD577LFculwmgbbq89ZpbxtrNcP6xtgCh6ogParJfrwg+Oa4VoOUDy/mijNO89",
	"koe2wd/fPn831VnfB0MlqbCuzx13CxGOc5sn0hjLaXssYSRcXWVDrb+8vSqYap2gXAqKV5oWC9MIoUcg",
	"4RAtR9NBKzo1R4/d6c7awhiFJ9dCKCkVtYjGk4L23o1SlpoymzsU5+mlqw7x+ajJabpgOpgJciKgSsIa",
	"02R0OFqRJGH/S/JcyOuERdOY3I7GI52QM7pSf/4xYRGSBK+n0FYMBimGfnhwUB5WU2qK4aAkG47s6QZO",
	"OVGM3zdSGH/722+O0ZvjydH5zO9NpCHz7RuoGilZxPw2EAfWWuB7y/W4okNQQiNibCnmpEcZjlZk8vX0",
	"We2Qm81miuHnKePLAzNWHLycHZ/+dnmqxkzlR2358A0dFMI7PYqyLVkhykE7jnSwzejZVC0M3hCS4oyO",
	"DkffTJ/BXtTDCCh0YM7nGcUPhIsGylhztJLwQV7EICmxCdtuKqNzJmSxV2EidVxBlB9ZvLUYRDRVe0Ed",
	"Bx+EFqq1zNQlUbUH/Xz+/Nl7N+B0Xz97NmjxioL5uYaZZ78C0Yl8vcZ82wWpOk2N3XUsOcszcfAJ/js7",
	"+Ry4n4NP+r+zk89qc8tQatkFkZySWxNW0+O+fiLB68q8EuS/N/Q1/Elt1ZTEpOrvCscKojcnGfmWYl3b",
	"vgbgwvhZf3f0icNLiOLX/mu8f3Ck6HEpbajhMSBxYBo+FuKljh2yMTph+j01g4Jd6aoxlK6Gbh1Z7Dwt",
	"waD7oPPOZe+B1Hdc37ygfbBgt0sYghuZrh04AaFqoqQtwJJ/T7yKz2EEMVUHrRAVrGbuS25eu6RS2eXA",
	"e6BnbqjRvQ9s6VUefM8Y069gch+s6Vtrfic8KUVtNDz9Jo3JBQ967Ms1I/fCzMp9e01rXuMIKTf9a0KV",
	"Up3kfSJIsc4DYUO1pueg+y9Vj979pifg17m/+4bpKuVTd7z4ejeHPd5+dbF7QIHdGmo0+jv740bVYTUI",
	"Q3KxqsgSna9FDUdM2pxfcx+yzUEYLnVb1UapEgPzokwqaNFQFHNfiNFRg7MZQ7quqbGy6ZCLEpLxYVIf",
	"JLaIu8p8Xdk/+7iK9jX3zK078oH6EOYukB+CCybWnEzKduYOfLDBv6IxQD33IvLLWNAjxH4fiNC57J5x",
	"oTteug869Ad8BxKYDClx8MnlTX3Wv8XeEy/arAM5r5tn4WleUcVhtvWrLz623/6sPx3dEfADTateEKcz",
	"JpuK99db09jbgGUHn1zlbDpHcoc32SpLHSAOhNS3mlxsR50mS4ifRzfAFNKFW5/KOXllqxQMBHbTw1hU",
	"HGB6nycYdyxnNt6+ZpFxOMiKFOays2oX4QYjaaU1576kmlCH2j/FMgobQVFfIbUfOpZeRTi9IBOcxhOb",
	"MT2xqscjnjYI8Z4n2W/Qr+T6WdDH4vtDKMQt2rLs5XhyEej2//ripVc5w+aQ+euq7SgtsSQp+R3169Rk",
	"k9v9cDnABMt490Va1a74DyKSVFY1R/UW76ZE/46RmSD0YN0/iTqyZDSOHknyb0SSfwdaHKQUVKhwMPW1",
	"Et10Q5JkcpOyTXrAMpJSXz+YFDGSTkvIOIl0o3eNvWG9wU4FYQT1Wz+Dn8t3boMORnu8hh6x/ENE9zfH",
	"l2h2ch4I3v9yJPdx0zIFQ7pnpqVQT3HtA6e/NqqZTfkGBsC2PKJt7KuYja6b5wq6VaPy/LqmFZyjceRU",
	"8y7HdWc/W4AZRA4WQKu2pL3DJV2Fits2reuXwLrDmkfIJTqhmPBKF0MWE+QiXWx0l4ANps1taMamPJ0Z",
	"GSO8VK+LRAmWLQdiMZkXWVd3PJUpGQJ73uCi3oE+oz6ZW6zflor6YQPvNFiExFaY1F7/XBA+wUtTwbdU",
	"ENQvRenM5xknt5TlItkiIiTWVQVjE0PftKQpUOxVIClVH8w4A/piXKccrfGN/byx90+YIopam8OBpeMX",
	"bWsmTfEdC+oCk8MQJEUsw3/ktnZOqayyq6S8xlRHD+vexH7BO+vgwmmMIpwk1zi60VJVEPSus6Isqjmb",
	"epXmdg2kPURQU5axQS9QBC1f/nz2+uWJk8pMsumtKVEccSbERFBZ7HbB+JJoE1MQkK5CRG9AnqaKSOIi",
	"qL459SNi6S3ZCpO+of/m1Wj2DHjq37q2GdpgU9GQXaubmKJXeSJpljQu4kmpmhq2Cp1A9JiXnZDuCksX",
	"RlPdqY8t0NouVbHWhEAXrtMyCJQ6cPArYSIPlWyRkkjaENnXFy/1/Zt/QzltG/seUxGxWwhpN1QMvE4S",
	"vqYp8QD6lQJRhq9pQiGZQeGvKzs6RRenx2evXp3+dnJ6oiDh4rH9En2ttGhL0mnxZ0eaBHv3CtyEBSa8",
	"OvoXHFeRY9GVzNKexpFM0jX9N3GU9JVA5GNGODSevYfTQbWile6PPShMDRivyVXyu7K6fBFzbbYiLvko",
	"bWneikZH+BQdmamKLpB+aZ+izHiGhdA1dUz7V6MOgmrh941zL36hVxaQNxHcvBrn45cRUivBEDODLjZj",
	"tlliZPXTXBXrQkUsiW9AZ2WK/bPcVhG1FWxs49dljpVUSPQGGKdLmqqfzVmoaQnAxyhieRIrroBThKVU",
	"nLrhfv3N73TFXi6G7kbqyqzrUGNcqq6rjlGtHxx6PlpqlXUUKqPxRCfE6D9PLJ/A1wkxJcvejWz2JxFK",
	"2rVy5btRPafPsUwo5PTz1dX5JbqGumSvL16GGxW+80r6Q0W0lqaLLq0GJ5zgeKsL55oKcEWLCkDUovKw",
	"La9PdSlobsIpK+MUVugv/9//+b8CFRowSliRst4qac81KEdDwke/efZ1iyL7cbLZbCYLxteTnCdEv6Vl",
	"zTZcJzRc/SskgOi64yQlrgZgO5YFRoNGZPo5QNvLZIvwAtACUNu42ZTARCVdWqMQp+JGPaMJwTcN9bfD",
	"JbdcMTO6MCgEH5YQUsn0JpfeIqeXXVGXVeFs5COObMrogJ7t1Qojtr5cl5PjBcvTuGJFAKtBV4heUVDY",
	"qdXVfPtmP/5VW466vitRiDaei0nBkaWBwS5bV5F9lnF2WyDSaRpPoFJfnoEK4ZWDgDxJiEVAR1qOvzLd",
	"8r0+GsCo9aS6eFFdf3+YwK/KKg9kIqyt6kyE4/KsGxn0sDkU7bZfAea1xIIFkK4Pus00QkVlPLJx6Dor",
	"tlKRUOc1hS977/f84Ff8gLfb915pnN2zgfiezcFvvn40CP+nGIT9TPAHYyNHkULehMRLsibpvuLPjqKb",
	"VibybcD4faMEn2/vEZuPoptyT+YA7sIHIY7h56y384wM8+bbcy3L0tgmiYQblGtjV7K1ZZxrKgBOY7Qk",
	"UlQbvxftbECt8qw8WNS7mtsW5p6hwM5XW7jdeRBsTT4spnGwkN+z5m/N9PYfbnYbUtq60ZUSaABXcjsc",
	"fhkOko5tNrbM2cHx0dpy4u9rx3Lmpi/ZhtXa5yxMFf/Bzqj2qiDBiPd2f2+43ncYrh1+q762j0fHVLhF",
	"wCpY5OMLcxk0NuhpqDr2l/P4tBvGqqEQpS5d5Wc2ZD6ry8/P7zV7qybGNcvLx7oJshbVvwsUQ9WP7G9M",
	"oiPdMRI+ff5NYxM7dJpKKrfoijH0EvMlgQFf/xBgJoyhVzjdWriLkNyuz7OLIdHY3nxZvpZuqT4Iw2pv",
	"Mi+N56DOBTTDE2M3LMqfGk3Qq6ED1txMcz3H0pzxvxB335zryYaw5EvpnuSwUgOlWhm3zfGCbQKypuPZ",
	"HRXbZim0TV4zDuq5LfHiF7QVDaWBu0kqkJF4mSv2oXb5XejnF7rod7WSiRGYRH69pnWju1XWmC8dc5Yv",
	"V+jN8WUVQ28zH0Pty9McQKYowH4F0F/hNE501zxbPrcIRlX81a9CoJ9Gpt6inCCWmyIFLnCtIQ1ZaYMX",
	"dmsdRhyvB1lRCsFL5WsKNrqbTce6LdtCO3YvhPLNsyB3MwAJ8CgPWC38yJFFq13I7+UK96crpYN2gJX+",
	"z4lYmZ+ti9AZj6qqsb4Z3z+7wsJoukoZA9eWyGHJRZ40IHcYQ4CW98cmW1Re6zUbW7dZ4XsGl6rHMG2J",
	"q0ZPoMKbPEkU37GIEtRI+6gYAOy6t+1O685dse6Qvs63mWRLjrOV7Y2L05itS61SPZ3Psm7SrF2U2+h7",
	"Yn3nbouKnb31j3rf6AZtpFcjrhJa2BHA4vpsv12frKHcu9KAmsPWPHFxh3HE9JCl3JYxtCDSJodIOwo7",
	"9y4/DgaJXlqPC7mYPan4bLHohbAVGdnDh/f9H+x7MhQrhgYMqisVwVmoK0WkcYwKg3eN4ZcKjLZz/Vbv",
	"k21l/ZgBVHttNWBEqfM3Tr3ilobpO/b+5viykdWG5Bu9gLbn78lrEmyz3OJFeb7flXtqgc/2uYtOB04H",
	"5dkpDSK46wtToH08y8l31SovRSOQsJ4I7TgetcRHLbFLS7zeFkqgnxdYzl7UFrBSABG8yGG10WvW0ozR",
	"n+RHKJWZYLr2lMkyGtvqizNvJFRT20P9CtiJX7/CL/aY2+q6O5QV7QLzkkhTS7lQc4wB3ijgta6voa44",
	"7Y/xCVi/i2pO4XdR3cnwSAJ3wcPrUOhuT92yxIk13jso+uVC9iZUvKmshm4fQKyo15uo9pzbV8GJYI/E",
	"fZfpaeqn16s6T7XDYg8utP/U978vsrqkahpHHs9+iMTxN+cPga2VJQch64O/t/0w3V/lHhjyn4LifwY7",
	"9oW5vfLjWgvGB+HIwRZ9A3hyVgZPCFfVMNB3NYYVJfcPDw4SFuFkxYQ8/Oez75+N1IWYKao4oQ34E20l",
	"jNGaxSSpOFKrOUSjOmbZffWcxx0jYOjXvvsVwYlcIdvx1IzTf9V//Pz+8/8PAAD//+icrVjoHgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
