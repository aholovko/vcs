// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
