// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//L1a6WgzCAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
