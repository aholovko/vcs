// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zTj9V/3Hu/d3/z8AAP//Mpk1mwcgAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
