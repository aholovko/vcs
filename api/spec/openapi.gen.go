// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
