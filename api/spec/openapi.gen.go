// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
