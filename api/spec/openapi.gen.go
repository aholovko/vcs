// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
