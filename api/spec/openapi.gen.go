// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"K2Q7nprv9F/1Hz+///z/AwAA//8nT9Phxx8BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
