// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"f9U/3r+//98AAAD//61QAceXvwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
