// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
