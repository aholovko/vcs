// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
