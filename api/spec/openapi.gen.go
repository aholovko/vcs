// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
