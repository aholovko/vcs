// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//5zSy+Vx+gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
