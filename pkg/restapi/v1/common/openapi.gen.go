// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for DIDMethod.
const (
	DIDMethodKey DIDMethod = "key"
	DIDMethodOrb DIDMethod = "orb"
	DIDMethodWeb DIDMethod = "web"
)

// Defines values for KMSConfigType.
const (
	KMSConfigTypeAws   KMSConfigType = "aws"
	KMSConfigTypeLocal KMSConfigType = "local"
	KMSConfigTypeWeb   KMSConfigType = "web"
)

// Defines values for VCFormat.
const (
	JwtVcJson   VCFormat = "jwt_vc_json"
	JwtVcJsonLd VCFormat = "jwt_vc_json-ld"
	LdpVc       VCFormat = "ldp_vc"
)

// Defines values for VPFormat.
const (
	JwtVp VPFormat = "jwt_vp"
	LdpVp VPFormat = "ldp_vp"
)

// Model to convey the details about the Credentials the Client wants to obtain.
type AuthorizationDetails struct {
	// String representing a format in which the Credential is requested to be issued. Valid values defined by OIDC4VC are jwt_vc_json-ld and ldp_vc. Issuer can refuse the authorization request if the given credential type and format combo is not supported.
	Format *string `json:"format,omitempty"`

	// An array of strings that allows a client to specify the location of the resource server(s) allowing the Authorization Server to mint audience restricted access tokens.
	Locations *[]string `json:"locations,omitempty"`

	// String that determines the authorization details type. MUST be set to "openid_credential" for OIDC4VC.
	Type string `json:"type"`

	// String array denoting the types of the requested Credential.
	Types []string `json:"types"`
}

// DID method of the DID to be used for signing.
type DIDMethod string

// Model for KMS configuration.
type KMSConfig struct {
	// Prefix of database used by local kms.
	DbPrefix *string `json:"dbPrefix,omitempty"`

	// Type of database used by local kms.
	DbType *string `json:"dbType,omitempty"`

	// URL to database used by local kms.
	DbURL *string `json:"dbURL,omitempty"`

	// KMS endpoint.
	Endpoint *string `json:"endpoint,omitempty"`

	// Path to secret lock used by local kms.
	SecretLockKeyPath *string `json:"secretLockKeyPath,omitempty"`

	// Type of kms used to create and store DID keys.
	Type KMSConfigType `json:"type"`
}

// Type of kms used to create and store DID keys.
type KMSConfigType string

// Supported VC formats.
type VCFormat string

// Supported VP formats.
type VPFormat string

// WalletInitiatedFlowData defines model for WalletInitiatedFlowData.
type WalletInitiatedFlowData struct {
	ClaimEndpoint        string   `json:"claim_endpoint"`
	CredentialTemplateId string   `json:"credential_template_id"`
	OpState              string   `json:"op_state"`
	ProfileId            string   `json:"profile_id"`
	ProfileVersion       string   `json:"profile_version"`
	Scopes               []string `json:"scopes"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xWQW/bOBP9KwOeWkBxiq/fybes3AJGkq1RN+5hWxgUObIYU6SWHNnxFvnvi6Gs2I7l",
	"RduLYZGcN29mHmf4QyhfN96hoyjGP0RUFdYy/b1pqfLB/CPJeDdBksamdY1RBdPwqhiLe6/RAnlQ3m1w",
	"B1Qh6O4wyMK3lFbygBodGWlj920NOoKtdBTZ2BckjRuJTDTBNxjIYPJV+lBLOvc6p2DcCgI2ASMDuxVI",
	"6E6DcbCtjKpeeQYTIeDfLUZCzU4LBBNji3oEC2mNho20LUbQWBqHGoodfJpO8v8vcpAB4XFLy41aPkbv",
	"rqwG6TRY3Sw3agRThgmgpIOAZRsxuZbHCexdgynT5sps0IE6sKNdgwl0H4XydeGZs/MEsW0aHwg1p4hP",
	"irGIKQfiORPWq+RjoDw3DmQIcge+hM6ACyAJpLV+G0GC6kpBHmKDypRdCXtItuPvgNG3QSFEDBsMb+Lb",
	"DoETz/snYoF5OsSYtXEEstUGnUooFIzi/EulMHLt1+giR2UI6xTAWXj7hRTH4fuCJFJwGglDbRzGgUL0",
	"6mSYEdw/zL+wEiKmHHwTvkFn9PJQmW+CS9JLYbAAvBAvUuoKoNF56tOVDA657UV5EOuvZOQ5EwxhAmox",
	"/qvb7Dl9zwQZsnx68D6/YPniERUx+GQ6uUeqvD4PaDKdQJ32eu680l2lNmLSLkSzcsatOAJ0bc2UfChE",
	"JrbIv2vcJVavY7q9n+felWZ1qccw9u39nBtNaVZtSHGctwxdzAKW5ukcpltn5lqSLGTcky52Se4W1nUc",
	"LK8uvgxKjld/C+7h89052sPnO07lL4Kh0403bqBHcq763UHTiCog3Xm1vsXdTFI1kDJJVWoN6ShTWf8k",
	"L/rPjK3r2OHw4AgoqWt9kXzoNLXGXTxWUHL2oiG5jQMaGroHR/o/COy16DPxdEVyFdkqTYQgvj9nYpF/",
	"vDR++nYMi3zfr0/Yno4KkR0viEx0Y+OY24urgUwuZj9BY3aRRtM7bE4czi47/CqtRZo6Q0YS6o/WbyeS",
	"JPs/vWrKSlMvjxV4hnVoo0vCurGScGn04FHfLCNJwsHNJvjS2Iu2/fYGQ0y5GTgTld936d9srEcczj2+",
	"4Gev03IxCUchH1XmUvbPOjXTM670A7cstJH+sF7BIp/3b4fjtwaLXPJA5ku3wWBKsx/3beQR9fV9Dov8",
	"6mY2BWm9W8HWUAWfGnTTCT+HmuDJK9/15O7GXCcYDGAcYZAqoSWzLiDWpTUKXUwFdrJOM6mRqsKr/43e",
	"iUy0wYqxqIiaOL6+3m63I5m2Rz6srve28fpumn/4c/6BbUb0lCZWn7rc17V3++HK1BYpNFnYk3cgv06M",
	"QnizyOdvRSZeRCPejZhJ0iI62RgxFu9H7xK5RlIVxdi11j7/GwAA///GQmwnNQsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
