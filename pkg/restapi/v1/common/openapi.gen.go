// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for DIDMethod.
const (
	DIDMethodKey DIDMethod = "key"
	DIDMethodOrb DIDMethod = "orb"
	DIDMethodWeb DIDMethod = "web"
)

// Defines values for KMSConfigType.
const (
	KMSConfigTypeAws   KMSConfigType = "aws"
	KMSConfigTypeLocal KMSConfigType = "local"
	KMSConfigTypeWeb   KMSConfigType = "web"
)

// Defines values for VCFormat.
const (
	JwtVcJson   VCFormat = "jwt_vc_json"
	JwtVcJsonLd VCFormat = "jwt_vc_json-ld"
	LdpVc       VCFormat = "ldp_vc"
)

// Defines values for VPFormat.
const (
	JwtVp VPFormat = "jwt_vp"
	LdpVp VPFormat = "ldp_vp"
)

// Model to convey the details about the Credentials the Client wants to obtain.
type AuthorizationDetails struct {
	// String representing a format in which the Credential is requested to be issued. Valid values defined by OIDC4VC are jwt_vc_json-ld and ldp_vc. Issuer can refuse the authorization request if the given credential type and format combo is not supported.
	Format *string `json:"format,omitempty"`

	// An array of strings that allows a client to specify the location of the resource server(s) allowing the Authorization Server to mint audience restricted access tokens.
	Locations *[]string `json:"locations,omitempty"`

	// String that determines the authorization details type. MUST be set to "openid_credential" for OIDC4VC.
	Type string `json:"type"`

	// String array denoting the types of the requested Credential.
	Types []string `json:"types"`
}

// DID method of the DID to be used for signing.
type DIDMethod string

// Model for KMS configuration.
type KMSConfig struct {
	// Prefix of database used by local kms.
	DbPrefix *string `json:"dbPrefix,omitempty"`

	// Type of database used by local kms.
	DbType *string `json:"dbType,omitempty"`

	// URL to database used by local kms.
	DbURL *string `json:"dbURL,omitempty"`

	// KMS endpoint.
	Endpoint *string `json:"endpoint,omitempty"`

	// Path to secret lock used by local kms.
	SecretLockKeyPath *string `json:"secretLockKeyPath,omitempty"`

	// Type of kms used to create and store DID keys.
	Type KMSConfigType `json:"type"`
}

// Type of kms used to create and store DID keys.
type KMSConfigType string

// Supported VC formats.
type VCFormat string

// Supported VP formats.
type VPFormat string

// WalletInitiatedFlowData defines model for WalletInitiatedFlowData.
type WalletInitiatedFlowData struct {
	ClaimEndpoint        string   `json:"claim_endpoint"`
	CredentialTemplateId string   `json:"credential_template_id"`
	ProfileId            string   `json:"profile_id"`
	ProfileVersion       string   `json:"profile_version"`
	Scopes               []string `json:"scopes"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xWUW/bOAz+K4SeNsBNh9s95W3nbEDQ9hYsa/ZwGwJZomM1suST6KS5of/9QDluksa5",
	"2/YSxJL48SP5idR3oXzdeIeOohh/F1FVWMv0911LlQ/mH0nGuwmSNData4wqmIZXxVjceY0WyIPyboM7",
	"oApBd4dBFr6ltJIH1OjISBu7b2vQEWylo8jGviBp3Ehkogm+wUAGk6/Sh1rSudc5BeNWELAJGBnYrUBC",
	"dxqMg21lVPXCM5gIAf9uMRJqdlogmBhb1CNYSGs0bKRtMYLG0jjUUOzg43SS/77IQQaEhy0tN2r5EL27",
	"shqk02B1s9yoEUwZJoCSDgKWbcTkWh4nsHcNpkybK7NBB+rAjnYNJtB9FMrXhWfOzhPEtml8INScIj4p",
	"xiKmHIinTFivko+B8rxzIEOQO/AldAZcAEkgrfXbCBJUVwryEBtUpuxK2EOyHX8HjL4NCiFi2GB4FV93",
	"CJx43j8RC8zTIcasjSOQrTboVEKhYBTnXyqFkWu/Rhc5KkNYpwDOwtsvpDgO3xckkYLTSBhq4zAOFKJX",
	"J8OM4O5+/pmVEDHl4KvwDTqjl4fKfBVckl4KgwXghXiRUlcAjc5Tn65kcMhtL8qDWH8mI0+ZYAgTUIvx",
	"X91mz+lbJsiQ5dOD9/kZyxcPqIjBJ9PJHVLl9XlAk+kE6rTXc+eV7iq1EZN2IZqVM27FEaBra6bkQyEy",
	"sUX+XeMusXoZ083dPPeuNKtLPYaxb+7m3GhKs2pDiuO8ZehiFrA0j+cw3Toz15JkIeOedLFLcrewruNg",
	"eXXxeVByvPpLcPefbs/R7j/dcip/EgydbrxxAz2Sc9XvDppGVAHp1qv1De5mkqqBlEmqUmtIR5nK+gd5",
	"0X9mbF3HDocHR0BJXeuL5EOnqTXu4rGCkrNnDcltHNDQ0D040v9BYC9Fn4nHK5KryFZpIgTx7SkTi/zD",
	"pfHTt2NY5Pt+fcL2dFSI7HhBZKIbG8fcnl0NZHIx+wEas4s0mt5hc+JwdtnhF2kt0tQZMpJQf7B+O5Ek",
	"2f/pVVNWmnp5rMAzrEMbXRLWjZWES6MHjzbBl8b+7/YGQ0zhD5yJyu8b8S/2ziMO5x6f8bOXkV+M8yjj",
	"l7J61oGZk3GlH7g9oY30h/UKFvm8fxMcvyFYvJIHLV+mDQZTmv0YbyOPni9vc1jkV+9mU5DWuxVsDVXw",
	"sUE3nfAzpwmevPJdr+1uwnWCwQDGEQapEloy6wJivVmj0MV03Z2s06xppKrw6rfRG5GJNlgxFhVRE8fX",
	"19vtdiTT9siH1fXeNl7fTvP3f87fs82IHtMk6lOX+7r2bj80mdoihSYLe/K+41eHUQivFvn8tcjEs1LE",
	"mxEzecrScJeNEWPxdvQmkWskVVGMXWvt078BAAD//zUAIu4NCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
